/*
	tcp4次挥手流程详解

		四次挥手：用于断开TCP连接，确保双方都已完成数据传输并安全地关闭连接


		// 第一次挥手
		客户端 -> 服务器: FIN, seq=1002

		// 第二次挥手
		服务器 -> 客户端: ACK, seq=2002, ack=1003

		// 第三次挥手
		服务器 -> 客户端: FIN, seq=2003, ack=1003

		// 第四次挥手
		客户端 -> 服务器: ACK, seq=1003, ack=2004


		第一次挥手:
			客户端向服务器发送一个FIN（Finish）报文段，表示客户端已经没有数据要发送了。
			报文段中包含客户端的当前序列号。
			客户端进入FIN_WAIT_1状态。

		第二次挥手:
			服务器收到客户端的FIN报文段后，发送一个ACK（确认）报文段作为应答。
			报文段中的确认号为客户端的序列号加1。
			服务器进入CLOSE_WAIT状态，客户端进入FIN_WAIT_2状态。

		第三次挥手:
			服务器完成数据发送后，向客户端发送一个FIN报文段，表示服务器也没有数据要发送了。
			报文段中包含服务器的当前序列号。
			服务器进入LAST_ACK状态。

		第四次挥手:
			客户端收到服务器的FIN报文段后，发送一个ACK报文段作为应答。
			报文段中的确认号为服务器的序列号加1。
			客户端进入TIME_WAIT状态，等待2MSL（Maximum Segment Lifetime）时间后，连接完全关闭。
			服务器收到客户端的ACK报文段后，进入CLOSED状态，连接关闭。


		为什么客户端要等待2MSL？
			主要原因是为了保证客户端发送那个的第一个ACK报文能到到服务器，
			因为这个ACK报文可能丢失，并且2MSL是任何报文在网络上存在的最长时间，
			超过这个时间报文将被丢弃，这样新的连接中不会出现旧连接的请求报文。





		在标准的TCP连接关闭过程中，通常需要四次挥手来确保双方都正确地关闭连接。
		然而，在某些特殊情况下，可能会出现三次挥手的情况。
		这种情况通常发生在一方主动关闭连接，而另一方在收到FIN报文段后立即关闭自己的连接。


		这些情况下，TCP协议会发送FIN报文段来表示连接的关闭请求。
			应用程序调用关闭函数：如 close() 或 shutdown()。

			半关闭连接：使用 shutdown(socket, SHUT_WR) 关闭发送方向。

			超时或异常情况：检测到连接超时或异常，调用 close(socket)。

			服务器端资源管理：定期检查连接状态，关闭不活跃的连接。

			客户端或服务器主动关闭连接：根据业务逻辑主动关闭连接。

			系统资源限制：系统资源达到上限，操作系统自动关闭连接。


		ACK不会重传，FIN会重传

		第一次挥手（客户端发送FIN报文段）丢失
			客户端：客户端发送FIN报文段后进入FIN_WAIT_1状态。
			服务器：服务器没有收到FIN报文段，因此不会发送ACK报文段。
			处理：客户端会定时重传FIN报文段，直到收到服务器的ACK报文段。
				如果重传多次仍无响应，客户端可能会超时并关闭连接。

		第二次挥手（服务器发送ACK报文段）丢失
			客户端：客户端发送FIN报文段后进入FIN_WAIT_1状态，等待服务器的ACK报文段。
			服务器：服务器收到FIN报文段后发送ACK报文段，但ACK报文段丢失。
			处理：客户端没有收到ACK报文段，会定时重传FIN报文段。
				服务器收到重传的FIN报文段后，会再次发送ACK报文段。
				最终，客户端会收到ACK报文段并进入FIN_WAIT_2状态。

		第三次挥手（服务器发送FIN报文段）丢失
			客户端：客户端收到服务器的ACK报文段后进入FIN_WAIT_2状态，等待服务器的FIN报文段。
			服务器：服务器发送FIN报文段后进入LAST_ACK状态。
			处理：客户端没有收到服务器的FIN报文段，服务器会定时重传FIN报文段。
				客户端收到FIN报文段后，发送ACK报文段并进入TIME_WAIT状态。

		第四次挥手（客户端发送ACK报文段）丢失
			客户端：客户端收到服务器的FIN报文段后发送ACK报文段，进入TIME_WAIT状态。
			服务器：服务器没有收到客户端的ACK报文段，会定时重传FIN报文段。
			处理：客户端会继续等待，直到收到服务器重传的FIN报文段，然后再次发送ACK报文段。
				最终，服务器收到ACK报文段后进入CLOSED状态，
				客户端在TIME_WAIT状态等待2MSL时间后也进入CLOSED状态。

		总结
			重传机制：TCP协议使用重传机制来处理报文段丢失的情况。
				如果某个报文段在规定时间内没有收到确认，发送方会重传该报文段。

			超时机制：如果重传多次仍无响应，发送方可能会超时并关闭连接。
			状态转换：在报文段丢失的情况下，TCP协议会通过重传机制确保状态的正确转换，最终完成连接的关闭。
*/