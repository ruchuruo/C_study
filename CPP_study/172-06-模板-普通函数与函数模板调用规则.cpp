
/*
	第1阶段C++ 匠心之作 从0到1入门

	第2阶段实战-通讯录管理

	第3阶段-C++核心编程

	第4阶段实战-基于多态的企业职工系统

	第5阶段-C++提高编程

		1 模板

			1.1 模板的概念

			1.2 函数模板

					1.2.1 函数模板语法

					1.2.2 函数模板注意事项

					1.2.3 函数模板案例

					1.2.4 普通函数与函数模板的区别

					1.2.5 普通函数与函数模板的调用规则

						调用规则如下：

							如果函数模板和普通函数都可以实现，优先调用普通函数
							可以通过空模板参数列表来强制调用函数模板
							函数模板也可以发生重载
							如果函数模板可以产生更好的匹配,优先调用函数模板

						总结：既然提供了函数模板，最好就不要提供普通函数，否则容易出现二义性
*/

#include <iostream>

using namespace std;

//普通函数与函数模板调用规则
void myPrint(int a, int b)
{
	cout << "调用的普通函数" << endl;
}

template<typename T>
void myPrint(T a, T b)
{
	cout << "调用的模板" << endl;
}

template<typename T>
void myPrint(T a, T b, T c)
{
	cout << "调用重载的模板" << endl;
}

void test01()
{
	//1、如果函数模板和普通函数都可以实现，优先调用普通函数
	// 注意 如果告诉编译器  普通函数是有的，但只是声明没有实现，或者不在当前文件内实现，就会报错找不到
	int a = 10;
	int b = 20;
	myPrint(a, b); //调用普通函数

	//2、可以通过空模板参数列表来强制调用函数模板
	myPrint<>(a, b); //调用函数模板

	//3、函数模板也可以发生重载
	int c = 30;
	myPrint(a, b, c); //调用重载的函数模板

	//4、 如果函数模板可以产生更好的匹配,优先调用函数模板
	char c1 = 'a';
	char c2 = 'b';
	myPrint(c1, c2); //调用函数模板
}

int main()
{
	test01();

	return 0;
}