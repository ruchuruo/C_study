
/*
	第1阶段C++ 匠心之作 从0到1入门

	第2阶段实战-通讯录管理

	第3阶段-C++核心编程

	第4阶段实战-基于多态的企业职工系统

	第5阶段-C++提高编程

		1 模板

		2 STL初识

		3 STL- 常用容器

			3.1 string容器

			3.2 vector容器

			3.3 deque容器

			3.4 案例-评委打分

			3.5 stack容器

			3.6 queue 容器

			3.7 list容器

				3.7.1 list基本概念

					功能：将数据进行链式存储

					链表（list）是一种物理存储单元上非连续的存储结构，数据元素的逻辑顺序是通过链表中的指针链接实现的

					链表的组成：链表由一系列结点组成

					结点的组成：一个是存储数据元素的数据域，另一个是存储下一个结点地址的指针域

					STL中的链表是一个双向循环链表

					|                        front()                          back()
					|   push_front() ---→    +------+   +------+   +------+   +------+   ←--- push_back()
					|                        | data |   | data |   | data |   | data |
					|   pop_front()  ←---    |------|   |------|   |------|   |------|   ---→ pop_back()
					|                Node4 ← | prev | ← | prev | ← | prev | ← | prev |
					|                        | next | → | next | → | next | → | next | → Node1
					|                        +------+   +------+   +------+   +------+
					|                           ↑                     ↑                ↑
					|                        begin()               insert()           end()

					由于链表的存储方式并不是连续的内存空间，因此链表list中的迭代器只支持前移和后移，属于双向迭代器

					list的优点：

						采用动态存储分配，不会造成内存浪费和溢出
						链表执行插入和删除操作十分方便，修改指针即可，不需要移动大量元素

					list的缺点：

						链表灵活，但是空间(指针域) 和 时间（遍历）额外耗费较大
						List有一个重要的性质，插入操作和删除操作都不会造成原有list迭代器的失效，这在vector是不成立的。
						(vector 容器插入数据后可能会移动到新的内存空间 所以原来的迭代器会失效)

					总结：STL中List和vector是两个最常被使用的容器，各有优缺点
*/